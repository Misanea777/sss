using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using VulnerabilityScanner.Frontend;

namespace VulnerabilityScanner
{
    public partial class Form1 : Form
    {
        Controller controller;
        ImportForm importForm;
        CreateCustomForm createCustomForm;
        public Form1(Controller controller)
        {
            this.controller = controller;
            importForm = new ImportForm(controller, this);
            createCustomForm = new CreateCustomForm(controller, this);
            InitializeComponent();
            policiesTreeView.CheckBoxes = true;

            controller.updatePolicyComBox(policiesComboBox);

            setCustomization();
        }

        private void setCustomization()
        {
            policiesTreeView.BackColor = Color.AntiqueWhite;
        }



        private void policiesComboBox_SelectionChangeCommitted(object sender, EventArgs e)
        {
            policiesTreeView.Nodes.Clear();
            string name = policiesComboBox.SelectedItem.ToString() + ".xml";
            controller.getPoliciesfromXml(name);
            controller.setDisplayedPoliciesToCurrentPolicies();
            controller.displayPolicies(controller.currentPolicies, policiesTreeView);
        }

        private void addButton_Click(object sender, EventArgs e)
        {
            if(importForm.IsDisposed)
            {
                importForm = new ImportForm(controller, this);
            }
            importForm.Show();
        }

        public ComboBox getPolicyComBox() { return policiesComboBox; }

        private void searchTextBox_TextChanged(object sender, EventArgs e)
        {
            controller.displayPolicies(controller.getListFromSearch(searchTextBox.Text), policiesTreeView);
        }

        private void scanButton_Click(object sender, EventArgs e)
        {
            controller.scan(controller.currentPolicies);
            controller.displayPolicies(controller.currentPolicies, policiesTreeView);
        }

        private void createCustomButton_Click(object sender, EventArgs e)
        {
            if (createCustomForm.IsDisposed)
            {
                createCustomForm = new CreateCustomForm(controller, this);
            }
            createCustomForm.Show();
        }

        private void selectAllButton_Click(object sender, EventArgs e)
        {
            controller.selectDisplayedPol(policiesTreeView);
        }

        private void DeselectAllButton_Click(object sender, EventArgs e)
        {
            controller.deselectDisplayedPol(policiesTreeView);
        }



        private void policiesTreeView_AfterCheck(object sender, TreeViewEventArgs e)
        {
            if (e.Action != TreeViewAction.Unknown)
            {
                Console.WriteLine(e.Node.Checked);
                Console.WriteLine(e.Node.Text);
                if(e.Node.Checked)
                {
                    controller.selectPolicy(e.Node.Index);
                }
                else controller.deselectPolicy(e.Node.Index);

                Console.WriteLine();
            }
        }

        private void deletePolicyButton_Click(object sender, EventArgs e)
        {
            policiesTreeView.Nodes.Clear();
            string name = policiesComboBox.SelectedItem.ToString() + ".xml";
            controller.deletePolicy(name);
            controller.updatePolicyComBox(policiesComboBox);
        }

        private void enforceButton_Click(object sender, EventArgs e)
        {
            controller.enforceSelectedPol();
        }

        private void rollBackButton_Click(object sender, EventArgs e)
        {
            Cursor.Current = Cursors.WaitCursor;
            controller.rollBack();
            Cursor.Current = Cursors.Default;
        }

        private void pictureBox1_Click(object sender, EventArgs e)
        {

        }
    }
}

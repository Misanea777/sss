using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Windows.Forms.VisualStyles;
using System.Xml;
using VulnerabilityScanner.Backend.Executors;
using VulnerabilityScanner.Backend.Policies;

namespace VulnerabilityScanner
{
    public class Controller
    {
        public List<Policy> currentPolicies = new List<Policy>();
        public List<int> currentDisplPolicies;
        public List<int> selectedPol = new List<int>();

        public string[] getParsedFilesDir()
         {
            var path = System.IO.Path.GetDirectoryName(
                System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase).Substring(6);
               return Directory.GetFiles(path, "*.xml");
        }

        public void displayPolicies(List<Policy> policies, TreeView polTree)
        {
            polTree.Nodes.Clear();

            for(int i=0; i<policies.Count; i++)
            {
                TreeNode node = new TreeNode(policies[i].ToString());

                if (node.Text.Contains(RESULT.FAILED.ToString())) node.ForeColor = Color.Red;
                if (node.Text.Contains(RESULT.PASSED.ToString())) node.ForeColor = Color.Green;
                if (node.Text.Contains(RESULT.NOT_APLIED.ToString())) node.ForeColor = Color.DarkGray;
     

                polTree.Nodes.Add(node);
            }


            displayCheckedNodes(polTree);
        }

        public void displayCheckedNodes(TreeView polTree)
        {
            foreach (TreeNode node in polTree.Nodes) node.Checked = false;

            foreach (int selectIndex in selectedPol)
            {
                int tmp = currentDisplPolicies.IndexOf(selectIndex);
                if (tmp != -1) polTree.Nodes[tmp].Checked = true;
            }

        }

        public void getPoliciesfromXml(string path)
        {
            XmlDocument uploadedDoc = new XmlDocument();
            uploadedDoc.Load(path);
            currentPolicies = Serializer.deserealizeFromXml(uploadedDoc);
            currentDisplPolicies = null;
            selectedPol = new List<int>();
    }

        public void importFromAudit(string path, string name)
        {
            XmlDocument doc;
            doc = Serializer.fromAuditToXml(path);
            doc.Save(name + ".xml");
        }

        public void updatePolicyComBox(ComboBox policyCombox)
        {
            policyCombox.Items.Clear();
            string[] policiesList = getParsedFilesDir();
            foreach (string s in policiesList)
            {
                string name = Path.GetFileName(s);
                policyCombox.Items.Add(name.Substring(0, name.Length - 4)); 
            }
        }

        public void scan(List<Policy> policies)
        {
            CommandExecutor.ExecuteCommand("secedit.exe /export /cfg extracted_pol.inf");
            var file = IniFile.Load("extracted_pol.inf");
            Scaner.scan(file, policies);
        }

        public void enforceSelectedPol()
        {
            var file = IniFile.Load("extracted_pol.inf");
            SecureConfig.enforcePolicies(file, getSelectedPolicies());
        }

        public List<Policy> getListFromSearch(string keyword)
        {
            List<Policy> result = new List<Policy>();
            currentDisplPolicies = new List<int>();
            for(int i=0; i<currentPolicies.Count; i++)
            {
                if (currentPolicies[i].ToString().Contains(keyword))
                {
                    result.Add(currentPolicies[i]);
                    currentDisplPolicies.Add(i);
                }
            }
            return result;
        }

        public void rollBack()
        {
            Backup.rollBack();
        }

        public void setDisplayedPoliciesToCurrentPolicies()
        {
            currentDisplPolicies = new List<int>();
            for (int i=0; i<currentPolicies.Count; i++)
            {
                currentDisplPolicies.Add(i);
            }
            //Console.WriteLine(currentDisplPolicies.Count);
        }

        public void printDisplayedPol()
        {
            foreach(int index in currentDisplPolicies)
            {
                Console.WriteLine(currentPolicies[index].ToString());
            }
        }

        public void printSelectedPol()
        {
            foreach (int index in selectedPol)
            {
                Console.WriteLine(currentPolicies[index].ToString());
            }
        }

        public void selectDisplayedPol(TreeView polTree)
        {
            foreach (int index in currentDisplPolicies)
            {
                if(selectedPol.IndexOf(index) == -1) selectedPol.Add(index);
            }
            displayCheckedNodes(polTree);
        }

        public void deselectDisplayedPol(TreeView polTree)
        {
            foreach(int index in currentDisplPolicies)
            {
                selectedPol.Remove(index);
            }
            displayCheckedNodes(polTree);
        }

        public void selectPolicy(int index)
        {
           // Console.WriteLine(currentPolicies[currentDisplPolicies[index]]);
            selectedPol.Add(currentDisplPolicies[index]);
        }

        public void deselectPolicy(int index)
        {
            //Console.WriteLine(currentPolicies[currentDisplPolicies[index]]);
            selectedPol.Remove(currentDisplPolicies[index]);
        }

        public void createNewXmlPolFromSelected(string name)
        {
            XmlDocument doc = new XmlDocument();
            Serializer.serializeToXml(doc, getSelectedPolicies());
            doc.Save(name + ".xml");
        }

        public List<Policy> getSelectedPolicies()
        {
            List<Policy> policies = new List<Policy>();
            foreach(int index in selectedPol)
            {
                policies.Add(currentPolicies[index]);
            }
            return policies;
        }

        public void deletePolicy(string path)
        {
            File.Delete(path);
        }
    }
}

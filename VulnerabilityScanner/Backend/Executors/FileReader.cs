using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace VulnerabilityScanner.Backend.Executors
{
    class FileReader
    {
        public string FileName { get; private set; }
        private TextReader textReader;
        public string currentLine { get; private set; }

        public FileReader(string fileName)
        {
            FileName = fileName;
            textReader = new StreamReader(FileName);
            currentLine = textReader.ReadLine();
        }

        public void getNextLine()
        {
            currentLine = textReader.ReadLine();
        }

        public string getText()
        {
            return new StreamReader(FileName).ReadToEnd();
        }
    }

    public class IniFile
    {
        public static IniFile Load(string filename)
        {
            var result = new IniFile();
            result.Sections = new Dictionary<string, IniSection>();
            var section = new IniSection(String.Empty);
            result.Sections.Add(section.Name, section);

            foreach (var line in File.ReadAllLines(filename))
            {
                var trimedLine = line.Trim();
                switch (line[0])
                {
                    case ';':
                        continue;
                    case '[':
                        section = new IniSection(trimedLine.Substring(1, trimedLine.Length - 2));
                        result.Sections.Add(section.Name, section);
                        break;
                    default:
                        var parts = trimedLine.Split('=');
                        if (parts.Length > 1)
                        {
                            section.Add(parts[0].Trim(), parts[1].Trim());
                        }
                        break;
                }
            }

            return result;
        }

        public IDictionary<string, IniSection> Sections { get; private set; }

        public void createInf(string fileName)
        {
            using (StreamWriter file = new StreamWriter(fileName + ".inf"))
            {
                foreach (KeyValuePair<string, IniSection> kvp in Sections)
                {
                    if (String.IsNullOrEmpty(kvp.Key)) continue;
                    file.WriteLine("[" + kvp.Key + "]");
                    foreach (KeyValuePair<string, string> section in kvp.Value)
                    {
                        file.WriteLine(section.Key + " = " + section.Value);
                    }

                }
            }

        }

    }

    public class IniSection : Dictionary<string, string>
    {
        public IniSection(string name) : base(StringComparer.OrdinalIgnoreCase)
        {
            this.Name = name;
        }

        public string Name { get; private set; }
    }

}

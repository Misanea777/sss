using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Windows.Forms.VisualStyles;
using System.Xml;
using VulnerabilityScanner.Backend.Policies;
using VulnerabilityScanner.Backend.Policies.Misc;

namespace VulnerabilityScanner.Backend.Executors
{
    class Serializer
    {
        private static Regex initialRx = new Regex("<custom_item>", RegexOptions.Compiled);
        private static Regex endRx = new Regex("</custom_item>", RegexOptions.Compiled);
        private static FileReader fileReader;

        public struct Data
        {
            public string PropertyName;
            public string Value;
        }

        public struct RawItem
        {
            public List<Data> proprieties;
        }

        public static List<RawItem> getItems()
        {
            List<RawItem> items = new List<RawItem>();
            while(fileReader.currentLine != null)
            {

                if (initialRx.Match(fileReader.currentLine).Success)
                {
                    RawItem rawItem;
                    string acumulator = "";
                    string whiteSpaces = getbeginingWhiteSpaces();
                    fileReader.getNextLine();
                    while (!endRx.Match(fileReader.currentLine).Success)
                    {
                        acumulator += fileReader.currentLine + "\n";
                        fileReader.getNextLine();
                    }
                    rawItem = new RawItem { proprieties = getItemProprieties(acumulator, whiteSpaces) };
                    items.Add(rawItem);
                }
                fileReader.getNextLine();
            }
            return items;

        }


        public static List<Data> getItemProprieties(string acumulator, string whiteSpaces)
        {
            List<Data> proprieties = new List<Data>();
            acumulator = acumulator.Trim();
            String[] spearator = { "\n"+whiteSpaces };
            String[] fields = acumulator.Split(spearator, StringSplitOptions.None);

            for(int i=0; i<fields.Length; i++)
            {
                fields[i] = fields[i].Replace("\n", " ");
                var pieces = fields[i].Split(new[] { ':' }, 2);
                for (int j = 0; j < pieces.Length; j++) pieces[j] = pieces[j].Trim();
                proprieties.Add(new Data { PropertyName = pieces[0], Value = pieces[1] });
            }
            return proprieties;
        }

        public static String getbeginingWhiteSpaces()
        {
            int count = fileReader.currentLine.TakeWhile(Char.IsWhiteSpace).Count();
            string whiteSpaces = "";
            for (int i = 0; i < count+2; i++) whiteSpaces += " ";
            return whiteSpaces;
        }

        public static XmlDocument fromAuditToXml(string fileName)
        {
            XmlDocument doc = new XmlDocument();
            List<RawItem> rawItems;
            //Initialize FileReader
            fileReader = new FileReader(fileName); 
            //Begin desirealization

            //Getting the RawItems
            rawItems = getItems();
            //printRawItems(rawItems);

            //constructing xml from Data
            serializeToXml(rawItems, doc);

            //Return xml
            return doc;
        }

        public static void printRawItems(List<RawItem> rawItems)
        {
            foreach(RawItem item in rawItems)
            {
                Console.WriteLine("item");
                foreach(Data d in item.proprieties)
                {
                    Console.WriteLine(d.PropertyName + " --> " + d.Value);
                }
                Console.WriteLine("/item");
                Console.WriteLine();
            }
        }

        public static List<Policy> deserealizeFromXml(XmlDocument doc)
        {
            List<Policy> policies = new List<Policy>();
            List<RawItem> rawItems = new List<RawItem>();
            XmlNode root = doc.FirstChild.NextSibling;
            //Begin desirealization

            //Chec if document is not empty
            if (!root.ChildNodes.OfType<XmlElement>().Any())
            {
                Console.WriteLine("Root does not have childs");
                return policies;
            }
            foreach(XmlNode node in root.ChildNodes)
            {
                rawItems.Add(getItem(node));
            }

            //Atempt to create correspondig objects
            foreach (RawItem rawItem in rawItems)
            {
                ItemType type;

                if (Enum.TryParse(rawItem.proprieties[0].Value, out type))
                {
                    if(type == ItemType.PASSWORD_POLICY) policies.Add(convertToClass(new PASSWORD_POLICY(), rawItem.proprieties));
                    if(type == ItemType.LOCKOUT_POLICY) policies.Add(convertToClass(new LOCKOUT_POLICY(), rawItem.proprieties));
                    if(type == ItemType.USER_RIGHTS_POLICY) policies.Add(convertToClass(new USER_RIGHTS_POLICY(), rawItem.proprieties));
                    if(type == ItemType.REGISTRY_SETTING) policies.Add(convertToClass(new REGISTRY_SETTING(), rawItem.proprieties));
                    if(type == ItemType.CHECK_ACCOUNT) policies.Add(convertToClass(new CHECK_ACCOUNT(), rawItem.proprieties));
                    if(type == ItemType.BANNER_CHECK) policies.Add(convertToClass(new BANNER_CHECK(), rawItem.proprieties));
                    if(type == ItemType.AUDIT_POLICY_SUBCATEGORY) policies.Add(convertToClass(new AUDIT_POLICY_SUBCATEGORY(), rawItem.proprieties));
                    if(type == ItemType.AUDIT_POWERSHELL) policies.Add(convertToClass(new AUDIT_POWERSHELL(), rawItem.proprieties));
                    if(type == ItemType.REG_CHECK) policies.Add(convertToClass(new REG_CHECK(), rawItem.proprieties));
                    if(type == ItemType.AUDIT_POLICY) policies.Add(convertToClass(new AUDIT_POLICY(), rawItem.proprieties));
                }
            }
            Console.WriteLine(policies.Count);
            //Return serialized policies
            return policies;
        }

        public static T convertToClass<T>(T target, List<Data> properties) where T : new()
        {
            foreach (var property in properties)
            {
                var propInfo = target.GetType().GetProperty(property.PropertyName);
                propInfo?.SetValue(target,
                    Convert.ChangeType(property.Value, propInfo.PropertyType), null);
            }
            return target;
        }

        public static RawItem getItem(XmlNode itemNode)
        {
            return new RawItem { proprieties = getItemProprieties(itemNode) };
        }

        public static List<Data> getItemProprieties(XmlNode itemNode)
        {
            List<Data> proprieties = new List<Data>();
            if (!itemNode.ChildNodes.OfType<XmlElement>().Any())
            {
                Console.WriteLine("Item is empty");
                return proprieties;
            }
            foreach(XmlNode node in itemNode.ChildNodes)
            {
                proprieties.Add(getPropritey(node));
            }
            return proprieties;
        }

        public static Data getPropritey(XmlNode proprietyNode)
        {
            return new Data { PropertyName = proprietyNode.Name, Value = proprietyNode.InnerText };
        }

        public static void serializeToXml(List<RawItem> rawItems, XmlDocument doc)
        {
            XmlElement item;
            doc.LoadXml("<?xml version='1.0' ?>" + "<root></root>");
            for(int i=0; i<rawItems.Count; i++)
            {
                item = doc.CreateElement("item_"+i);
                addProprietiesToItem(doc, item, rawItems[i].proprieties);
                doc.DocumentElement.AppendChild(item);
            }
           // doc.Save("hehe" + ".xml");

        }

        public static void addProprietiesToItem(XmlDocument doc, XmlElement item, List<Data> proprieties)
        {
            XmlElement propriety;
            foreach(Data pr in proprieties)
            {
                propriety = doc.CreateElement(pr.PropertyName);
                propriety.InnerText = pr.Value;
                item.AppendChild(propriety);
            }
        }

        public static void serializeToXml(XmlDocument doc, List<Policy> policies)
        {
            serializeToXml(fromObjToRaw(policies), doc);
        }

        public static List<RawItem> fromObjToRaw(List<Policy> policies)
        {
            List<RawItem> rawItems = new List<RawItem>();
            
            foreach(Policy policy in policies)
            {
                RawItem rawItem;
                List<Data> itemProprieties = new List<Data>();
                var myType = policy.GetType();
                IList<PropertyInfo> props = new List<PropertyInfo>(myType.GetProperties());
                foreach (var prop in props)
                {
                    var propValue = prop.GetValue(policy, null);
                    if (propValue == null) continue;
                    itemProprieties.Add(new Data { PropertyName = prop.Name, Value = propValue.ToString() });
                }
                rawItems.Add(new RawItem { proprieties = itemProprieties});
            }

            return rawItems;
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace VulnerabilityScanner.Backend.Executors
{
    class Converter
    {
        public static string toInfSignature(string rawType)
        {
            if (rawType.Equals("ENFORCE_PASSWORD_HISTORY")) return "PasswordHistorySize";
            if (rawType.Equals("MAXIMUM_PASSWORD_AGE")) return "MaximumPasswordAge";
            if (rawType.Equals("MINIMUM_PASSWORD_AGE")) return "MinimumPasswordAge";
            if (rawType.Equals("MINIMUM_PASSWORD_LENGTH")) return "MinimumPasswordLength";
            if (rawType.Equals("COMPLEXITY_REQUIREMENTS")) return "PasswordComplexity";
            if (rawType.Equals("REVERSIBLE_ENCRYPTION")) return "NotKnownForNow";
            if (rawType.Equals("FORCE_LOGOFF")) return "ForceLogoffWhenHourExpire";

            if (rawType.Equals("LOCKOUT_DURATION")) return "NotKnownForNow";
            if (rawType.Equals("LOCKOUT_THRESHOLD")) return "LockoutBadCount";
            if (rawType.Equals("LOCKOUT_RESET")) return "NotKnownForNow";

            if (rawType.Equals("ADMINISTRATOR_ACCOUNT")) return "EnableAdminAccount";
            if (rawType.Equals("GUEST_ACCOUNT")) return "EnableGuestAccount";
            if (rawType.Equals("ADMINISTRATOR_ACCOUNT_NAME")) return "NewAdministratorName";
            if (rawType.Equals("GUEST_ACCOUNT_NAME")) return "NewGuestName";

            return "NotKnown";
        }

        public static string getSidFromName(string name)
        {
            if (name.Equals("Null Authority")) return "S-1-0";
            if (name.Equals("")) return "S-1-0-0";
            if (name.Equals("World Authority")) return "S-1-1";
            if (name.Equals("Everyone")) return "S-1-1-0";
            if (name.Equals("Local Authority")) return "S-1-2";
            if (name.Equals("Local")) return "S-1-2-0";
            if (name.Equals("Creator Authority")) return "S-1-3";
            if (name.Equals("Creator Owner")) return "S-1-3-0";
            if (name.Equals("Creator Group")) return "S-1-3-1";
            if (name.Equals("Owner Rights")) return "S-1-3-4";
            if (name.Equals("Non-unique Authority")) return "S-1-4";
            if (name.Equals("NT Authority")) return "S-1-5";
            if (name.Equals("Dialup")) return "S-1-5-1";
            if (name.Equals("Network")) return "S-1-5-2";
            if (name.Equals("Batch")) return "S-1-5-3";
            if (name.Equals("Interactive")) return "S-1-5-4";
            if (name.Equals("Logon Session")) return "S-1-5-5-X-Y";
            if (name.Equals("SERVICE")) return "S-1-5-6";
            if (name.Equals("Anonymous")) return "S-1-5-7";
            if (name.Equals("Enterprise Domain Controllers")) return "S-1-5-9";
            if (name.Equals("Principal Self")) return "S-1-5-10";
            if (name.Equals("Authenticated Users")) return "S-1-5-11";
            if (name.Equals("Restricted Code")) return "S-1-5-12";
            if (name.Equals("Terminal Server Users")) return "S-1-5-13";
            if (name.Equals("Remote Interactive Logon")) return "S-1-5-14";
            if (name.Equals("This Organization")) return "S-1-5-17";
            if (name.Equals("Local System")) return "S-1-5-18";
            if (name.Equals("Administrator")) return "S-1-5-21domain-500";
            if (name.Equals("Guest")) return "S-1-5-21domain-501";
            if (name.Equals("Administrators")) return "S-1-5-32-544";
            if (name.Equals("Users")) return "S-1-5-32-545";
            if (name.Equals("Guests")) return "Guest";
            if (name.Equals("Guests")) return "S-1-5-32-546";
            if (name.Equals("Power Users")) return "S-1-5-32-547";
            if (name.Equals("Account Operators")) return "S-1-5-32-548";
            if (name.Equals("NT Service")) return "S-1-5-80";
            if (name.Equals("Remote Desktop Users")) return "S-1-5-32-555";
            if (name.Equals("LOCAL SERVICE")) return "S-1-5-19";
            if (name.Equals("NETWORK SERVICE")) return "S-1-5-20";
            if (name.Equals("Window Manager\\Window Manager Group")) return "S-1-5-90-0";
            if (name.Equals("NT SERVICE\\WdiServiceHost")) return "S-1-5-80";
            if (name.Equals("Backup Operators")) return "S-1-5-32-551";
            if (name.Equals("Virtual Machines")) return "S-1-5-83-0";
            if (name.Equals("Local account")) return "S-1-5-21-3575132926-2481037390-146541435-1001";


            return String.Empty;
        }

        public static string convertDWORD(string toConvert)
        {
            if (uint.TryParse(toConvert, out _)) return toConvert;
            if (toConvert.StartsWith("[") && toConvert.EndsWith("]"))
            {
                toConvert = toConvert.Substring(1, toConvert.Length - 2);
                string[] spliter = { ".." };
                var pices = toConvert.Split(spliter, StringSplitOptions.None);
                if (uint.TryParse(pices[0], out _)) return pices[0];
                if (uint.TryParse(pices[1], out _)) return pices[1];
            }

            return String.Empty;
        }

        public static string convertFromSetToInt(string toConvert)
        {
            if (toConvert.Equals("\"Enabled\"")) return "1";
            return "0";
        }
    }
}

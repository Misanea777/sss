using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using VulnerabilityScanner.Backend.Executors;
using VulnerabilityScanner.Backend.Policies.Misc;

namespace VulnerabilityScanner.Backend.Policies
{
    class CHECK_ACCOUNT : Policy
    {
        public string type { get; set; }
        public string description { get; set; }
        public string value_type { get; set; }
        public string value_data { get; set; }
        public string account_type { get; set; }
        public string check_type { get; set; }

        private RESULT passsed = RESULT.NOT_CHECKED;
        public CHECK_ACCOUNT()
        {
            type = ItemType.CHECK_ACCOUNT.ToString();
        }

        public override string ToString()
        {
            int len = passsed.ToString().Length;
            len -= 10;
            string addSpaces = "";
            for (int i = 0; i < len; i++) addSpaces += " ";
            return passsed.ToString() + addSpaces + " | " + description;
        }

        public void scan(IniFile file)
        {
            if (value_type.Equals("POLICY_TEXT") && !account_type.Contains("_NAME")) account_type += "_NAME";
            IniSection systemAccess = null;
            if (!file.Sections.TryGetValue("System Access", out systemAccess))
            {
                Console.WriteLine("Section " + "System Access" + " not found");
                passsed = RESULT.NOT_APLIED;
                return;
            }

            string result;
            if (!systemAccess.TryGetValue(Converter.toInfSignature(account_type), out result))
            {
                Console.WriteLine("Not found " + account_type);
                passsed = RESULT.NOT_APLIED;
                return;
            }

            bool response = Comparator.compare(value_data.Substring(1, value_data.Length - 2), value_type, result);


            if (check_type != null && (check_type.Equals("CHECK_NOT_EQUAL") || check_type.Equals("CHECK_NOT_REGEX")))
            {
                if (response ) passsed = RESULT.FAILED;
                else
                {
                    passsed = RESULT.PASSED;
                }
                return;
            }

            if (response) passsed = RESULT.PASSED;
            else passsed = RESULT.FAILED;

               
        }

        public RESULT isPassed()
        {
            return passsed;
        }

        public void enforce(IniFile file)
        {
            if (passsed == RESULT.NOT_APLIED || passsed == RESULT.NOT_CHECKED) return;


            if (value_type.Equals("POLICY_SET"))
            {
                file.Sections["System Access"][Converter.toInfSignature(account_type)] = Converter.convertFromSetToInt(value_data);
            }
            else
            {
                string mod = account_type;
                string res = file.Sections["System Access"][Converter.toInfSignature(mod)];
                file.Sections["System Access"][Converter.toInfSignature(mod)] = res.Substring(0, 2) + "_Acc\"";
            }

            
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using VulnerabilityScanner.Backend.Executors;
using VulnerabilityScanner.Backend.Policies.Misc;

namespace VulnerabilityScanner.Backend.Policies
{
    class AUDIT_POLICY_SUBCATEGORY : Policy
    {
        public string type { get; set; }
        public string description { get; set; }
        public string value_type { get; set; }
        public string value_data { get; set; }
        public string check_type { get; set; }
        public string audit_policy_subcategory { get; set; }

        private RESULT passsed = RESULT.NOT_CHECKED;
        public AUDIT_POLICY_SUBCATEGORY()
        {
            type = ItemType.AUDIT_POLICY_SUBCATEGORY.ToString();
        }
        public override string ToString()
        {
            int len = passsed.ToString().Length;
            len -= 10;
            string addSpaces = "";
            for (int i = 0; i < len; i++) addSpaces += " ";
            return passsed.ToString() + addSpaces + " | " + description;
        }

        public void scan(IniFile file)
        {
            string output = CommandExecutor.ExecuteCommand("auditpol /get /subcategory:"+audit_policy_subcategory);
            string[] separator = { "\n", "\r" };
            string[] pices = output.Split(separator, StringSplitOptions.RemoveEmptyEntries);

            if(pices[pices.Length - 1].Equals("Use AuditPol <command> /? for details on each command"))
            {
                passsed = RESULT.NOT_APLIED;
                return;
            }


            if(Comparator.compare(value_data, value_type, pices[pices.Length - 1].Trim()))
            {
                passsed = RESULT.PASSED;
                return;
            }
            passsed = RESULT.FAILED;

        }

        public RESULT isPassed()
        {
            return passsed;
        }

        public void enforce(IniFile file)
        {
            if (passsed == RESULT.NOT_APLIED || passsed == RESULT.NOT_CHECKED) return;

            string[] spliter = { " || " };
            string[] separator = { " && " };
            string[] options = value_data.Split(spliter, StringSplitOptions.None);
            options[0] = options[0].Replace("(", "").Replace(")", "");


            if (options[0].Contains("Success"))
            {
                CommandExecutor.ExecuteCommand("auditpol /set /subcategory:" + audit_policy_subcategory + " /success:enable /failure:disable");
                return;
            }
            if (options[0].Contains("Failure")) 
            {
                CommandExecutor.ExecuteCommand("auditpol /set /subcategory:" + audit_policy_subcategory + " /success:disable /failure:enable");
                return;
            }
            
            if (options[0].Contains("Success, Failure"))
            {
                CommandExecutor.ExecuteCommand("auditpol /set /subcategory:" + audit_policy_subcategory + " /success:enable /failure:enable");
                return;
            }


            // CommandExecutor.ExecuteCommand("auditpol /set /subcategory:" + audit_policy_subcategory + " /success:enable /failure:disable");

        }
    }
}

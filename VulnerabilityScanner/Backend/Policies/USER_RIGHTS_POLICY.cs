using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using VulnerabilityScanner.Backend.Executors;
using VulnerabilityScanner.Backend.Policies.Misc;

namespace VulnerabilityScanner.Backend.Policies
{
    class USER_RIGHTS_POLICY : Policy
    {
        public string type { get; set; }
        public string description { get; set; }
        public string value_type { get; set; }
        public string value_data { get; set; }
        public string check_type { get; set; }
        public string right_type { get; set; }
        public string use_domain { get; set; }

        private RESULT passsed = RESULT.NOT_CHECKED;
        public USER_RIGHTS_POLICY()
        {
            type = ItemType.USER_RIGHTS_POLICY.ToString();
        }

        public override string ToString()
        {
            int len = passsed.ToString().Length;
            len -= 10;
            string addSpaces = "";
            for (int i = 0; i < len; i++) addSpaces += " ";
            return passsed.ToString() + addSpaces + " | " + description;
        }

        public void scan(IniFile file)
        {
            IniSection systemAccess = null;
            if (!file.Sections.TryGetValue("Privilege Rights", out systemAccess))
            {
                Console.WriteLine("Section " + "Privilege Rights" + " not found");
                passsed = RESULT.NOT_APLIED;
                return;
            }
            string result;
            if (!systemAccess.TryGetValue(right_type, out result))
            {
                Console.WriteLine("Not found " + right_type);
                Console.WriteLine();
                passsed = RESULT.NOT_APLIED;
                return;
            }

            if (Comparator.compare(value_data, value_type, result))
            {
                passsed = RESULT.PASSED;
                return;
            }

            passsed = RESULT.FAILED;
        }

        public RESULT isPassed()
        {
            return passsed;
        }

        public void enforce(IniFile file)
        {
            if (passsed == RESULT.NOT_APLIED || passsed == RESULT.NOT_CHECKED) return;

            string d_value = Regex.Replace(value_data, "\".*?\"", m => Converter.getSidFromName(m.Value.Substring(1, m.Value.Length - 2)));

            string[] separator = { " && " };
            string[] spliter = { " || " };
            string[] options = d_value.Split(spliter, StringSplitOptions.None);
            options[0] = options[0].Replace("(", "").Replace(")", "").Replace("S", "*S").Replace(" && ", ",");

            file.Sections["Privilege Rights"][right_type] = options[0];
        }
    }
}

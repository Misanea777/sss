using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using VulnerabilityScanner.Backend.Executors;
using VulnerabilityScanner.Backend.Policies.Misc;

namespace VulnerabilityScanner.Backend.Policies
{
    class LOCKOUT_POLICY : Policy
    {
        public string type { get; set; }
        public string description { get; set; }
        public string value_type { get; set; }
        public string value_data { get; set; }
        public string check_type { get; set; }
        public string lockout_policy { get; set; }

        private RESULT passsed = RESULT.NOT_CHECKED;
        public LOCKOUT_POLICY()
        {
            type = ItemType.LOCKOUT_POLICY.ToString();
        }

        public override string ToString()
        {
            int len = passsed.ToString().Length;
            len -= 10;
            string addSpaces = "";
            for (int i = 0; i < len; i++) addSpaces += " ";
            return passsed.ToString() + addSpaces + " | " + description;
        }

        public void scan(IniFile file)
        {
            Console.WriteLine(description);
            IniSection systemAccess = null;
            if (!file.Sections.TryGetValue("System Access", out systemAccess))
            {
                Console.WriteLine("Section " + "System Access" + " not found");
                passsed = RESULT.NOT_APLIED;
                return;
            }
            string result;
            if (!systemAccess.TryGetValue(Converter.toInfSignature(lockout_policy), out result))
            {
                Console.WriteLine("Not found " + lockout_policy);
                passsed = RESULT.NOT_APLIED;
                return;
            }
            if (Comparator.compare(value_data, value_type, result)) passsed = RESULT.PASSED;
            else passsed = RESULT.FAILED;
        }

        public RESULT isPassed()
        {
            return passsed;
        }

        public void enforce(IniFile file)
        {
            if (passsed == RESULT.NOT_APLIED || passsed == RESULT.NOT_CHECKED) return;
            string convertedVal = Converter.convertDWORD(value_data);
            file.Sections["System Access"][Converter.toInfSignature(lockout_policy)] = convertedVal;
        }
    }
}
